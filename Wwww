Perfect ‚Äî that screenshot you‚Äôve got is a textbook example of a Pact consumer test for a BFF calling a TIBCO API. Let‚Äôs wrap it into clear technical documentation that you can actually commit into your repo‚Äôs /docs/contract-testing.md or Confluence.

Here‚Äôs the complete doc, written exactly how a senior SDET / architect would explain it:

‚∏ª

üßæ Contract Testing in BFF with Pact (Consumer: BFF | Provider: TIBCO API)

1Ô∏è‚É£ Overview

This document explains how our BFF service defines and tests its expectations from the TIBCO API using Pact.
We use Pact to create consumer contracts that describe how our BFF interacts with TIBCO ‚Äî without calling the real service.

This ensures:
	‚Ä¢	We never depend on live TIBCO endpoints during development or CI.
	‚Ä¢	We can detect breaking API changes early.
	‚Ä¢	We have a verifiable contract between our BFF and TIBCO provider.

‚∏ª

2Ô∏è‚É£ Architecture Under the Hood

Here‚Äôs what happens conceptually:

[ BFF Consumer Test ] 
        ‚îÇ
        ‚îÇ 1Ô∏è‚É£ Define expected request/response
        ‚ñº
[ Pact Mock Server ] ‚Üê‚îÄ‚îÄ‚îÄ fakes ‚îÄ‚îÄ‚îÄ [ TIBCO API (Provider) ]
        ‚îÇ
        ‚îÇ 2Ô∏è‚É£ BFF makes a real HTTP call (fetch/axios)
        ‚ñº
[ Pact verifies interaction + writes pact file ]

So during the consumer test, we mock only the provider (TIBCO), not our own BFF logic.

Later, the TIBCO provider runs its own provider verification test using the generated pact file to confirm it meets the same contract.

‚∏ª

3Ô∏è‚É£ Dependencies

npm install --save-dev @pact-foundation/pact @types/mocha @types/chai ts-node typescript mocha chai

If you‚Äôre running on Node < 18, also install:

npm install node-fetch

and at the top of your test:

import fetch from "node-fetch";
(global as any).fetch = fetch;


‚∏ª

4Ô∏è‚É£ Test Location

All Pact tests live under:

tests/contract/
  ‚îî‚îÄ‚îÄ bff-tibco-consumer.spec.ts

Each test corresponds to one TIBCO API contract (per resource or endpoint).

‚∏ª

5Ô∏è‚É£ Sample Pact Consumer Test

Here‚Äôs the actual code from our BFF repo that defines the contract between the BFF (consumer) and TIBCO API (provider):

import path from "path";
import { PactV3, MatchersV3 } from "@pact-foundation/pact";

const { like } = MatchersV3;

const provider = new PactV3({
  consumer: "bff-service",
  provider: "tibco-api",
  dir: path.resolve(process.cwd(), "pacts"), // Where the generated pact file will be stored
  logLevel: "info",
});

describe("Pact with TIBCO API", () => {
  it("should fetch user data successfully", async () => {
    // Define expected interaction between BFF and TIBCO
    provider
      .given("User exists in TIBCO")
      .uponReceiving("a request to POST user id")
      .withRequest({
        method: "POST",
        path: "/web/user/id",
        headers: { "content-type": "application/json" },
        body: { email: "test.user@example.com" },
      })
      .willRespondWith({
        status: 200,
        headers: { "Content-Type": "application/json" },
        body: like({
          userId: "00000000-0000-0000-0-us-000000000000",
        }),
      });

    // Execute test against Pact mock server
    await provider.executeTest(async (mockServer) => {
      // Mock the API base URL so BFF calls the Pact server instead of real TIBCO
      process.env.TIBCO_API_BASE_URL = mockServer.url;

      const user = await fetch(`${mockServer.url}/web/user/id`, {
        method: "POST",
        headers: { "content-type": "application/json" },
        body: JSON.stringify({ email: "test.user@example.com" }),
      });

      const userResponse = await user.json();
      expect(userResponse).toEqual({
        userId: "00000000-0000-0000-0-us-000000000000",
      });
    });
  });
});


‚∏ª

6Ô∏è‚É£ Under the Hood (What Really Happens)

Here‚Äôs what happens when this test runs:
	1.	Pact starts a mock provider server on a random port (e.g., http://127.0.0.1:8991).
	2.	Pact configures that mock server to expect the request you defined (POST /web/user/id with body email).
	3.	Your test code executes, and your BFF (or the fetch call) hits the mock server instead of the real TIBCO.
	4.	The mock server checks that:
	‚Ä¢	The request path, method, headers, and body match exactly what you declared.
	5.	The mock server returns the stubbed response (status 200, body with userId).
	6.	Pact verifies everything matched your defined expectations.
	7.	Pact writes a JSON contract file (pact) under pacts/ describing this interaction.

Example generated file:

pacts/bff-service-tibco-api.json


‚∏ª

7Ô∏è‚É£ Running the Test

Step 1: Run the Contract Tests

npm run test:contract

Add this script in package.json:

"scripts": {
  "test:contract": "mocha -r ts-node/register tests/contract/**/*.spec.ts --timeout 10000"
}

Step 2: Verify Output

You should see something like:

[INFO] Pact Mock server started on port 8991
‚úì should fetch user data successfully
1 passing (2s)

And your /pacts folder will contain:

bff-service-tibco-api.json


‚∏ª

8Ô∏è‚É£ Publishing the Pact

You can push the generated pact file to a Pact Broker so that the provider (TIBCO team) can verify it.

npx pact-broker publish pacts \
  --consumer-app-version=$(git rev-parse --short HEAD) \
  --branch main \
  --broker-base-url=https://pact-broker.company.com \
  --broker-token=$PACT_BROKER_TOKEN


‚∏ª

9Ô∏è‚É£ Provider Verification (TIBCO Side)

The TIBCO service team (provider) later pulls this pact file and verifies it against their real running API using:

npx pact-provider-verifier \
  --pact-broker-base-url=https://pact-broker.company.com \
  --provider-base-url=https://tibco-api.company.com \
  --provider=tibco-api \
  --broker-token=$PACT_BROKER_TOKEN

If TIBCO‚Äôs API behaves exactly as your contract says, verification passes.

‚∏ª

üîç Key Takeaways

Concept	Meaning
Consumer (BFF)	Defines what it expects from TIBCO
Provider (TIBCO)	Verifies it can deliver those expectations
Pact mock server	Simulates provider behavior during consumer tests
Pact file (.json)	The contract shared between both sides
Pact Broker	Central hub to publish & verify contracts


‚∏ª

üß≠ TL;DR

‚úÖ In the consumer test, we replace real TIBCO calls with Pact‚Äôs mock server.
‚úÖ Pact mock = simulated TIBCO.
‚úÖ We verify the BFF logic, not the provider.
‚úÖ The generated Pact file = formal contract of expectations.
‚úÖ TIBCO later runs provider verification to prove compliance.

‚∏ª

Would you like me to convert this doc into a formatted Markdown (.md) file that you can drop directly into your repo? I can generate it for you.
